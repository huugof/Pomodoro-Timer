:root {
    /* Base colors */
    --white: #FFFFFF;
    --blue-50: #93c5fd;
    --blue-600: #2563eb;
    --blue-700: #1d4ed8;
    --blue-900: #1e3a8a;
    --red-600: #DC2626;
    --red-700: #B91C1C;
    
    /* Work mode */
    --primary-color: var(--blue-600);
    --primary-hover: var(--blue-700);
    --danger-color: var(--red-600);
    --danger-hover: var(--red-700);
    --background: var(--white);
    --surface: var(--white);
    --text-primary: var(--blue-900);
    --text-secondary: var(--blue-600);

    /* Break mode */
    --break-background: var(--blue-900);
    --break-text: rgba(255, 255, 255, 0.8);
    --break-surface: rgba(255, 255, 255, 0.8);
    --break-surface-hover: rgba(255, 255, 255, 1);
    --break-ring-bg: rgba(255, 255, 255, 0.1);
}

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Inter', sans-serif;
    background-color: var(--background);
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
}

.container {
    padding: 2rem;
    width: 100%;
    max-width: 480px;
    text-align: center;
}

.timer-container {
    position: relative;
    margin: 2rem auto;
    width: 300px;
    height: 300px;
}

.progress-ring {
    position: relative;
    width: 100%;
    height: 100%;
}

.progress-ring circle {
    fill: none;
    stroke-width: 8;
}

.progress-ring-bg {
    stroke: #E5E7EB;
}

.progress-ring-circle {
    stroke: var(--primary-color);
    stroke-linecap: round;
    transition: stroke-dashoffset 0.35s;
    transform: rotate(-90deg);
    transform-origin: 50% 50%;
}

.timer-display {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
}

.time {
    font-size: 3.5rem;
    font-weight: 600;
    color: var(--primary-color);
    text-align: center;
    margin-top: -0.25rem;
}

.controls {
    margin-top: 2rem;
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
    align-items: center;
}

.primary-controls {
    display: flex;
    gap: 1rem;
    align-items: center;
}

.circle-button {
    width: 64px;
    height: 64px;
    border-radius: 50%;
    border: none;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    background: var(--surface);
    box-shadow: 0px 3px 10px rgba(0, 0, 0, 0.1), 
                0px 2px 4px rgba(0, 0, 0, 0.15);
    transition: all 0.2s ease;
}

.circle-button:hover {
    transform: translateY(-1px);
    box-shadow: 0px 5px 15px rgba(0, 0, 0, 0.15), 
                0px 3px 6px rgba(0, 0, 0, 0.2);
}

.circle-button:active {
    transform: translateY(0px);
    box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.1);
}

.circle-button svg {
    fill: currentColor;
}

.circle-button.primary {
    background: var(--primary-color);
    color: white;
}

.circle-button.primary:hover {
    background: var(--primary-hover);
}

#reset {
    color: var(--danger-color);
}

#reset:hover {
    background: var(--danger-color);
    color: white;
}

.pill-button {
    padding: 0.85rem 1.5rem;
    border-radius: 9999px;
    border: none;
    background: var(--surface);
    color: var(--text-primary);
    font-weight: 500;
    cursor: pointer;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.15);
    transition: all 0.2s
}

.circle-button.secondary {
    background: var(--surface);
    color: var(--primary-color);
}

.circle-button.secondary:hover {
    background: var(--primary-color);
    color: white;
}

.mode-switch {
    position: absolute;
    top: -1rem;
    right: -1rem;
    width: 40px;
    height: 40px;
    padding: 8px;
    z-index: 1;
    background: var(--surface);
    color: var(--primary-color);
}

.mode-switch:hover {
    background: var(--primary-color);
    color: white;
}

.mode-switch .break-icon {
    display: none;
}

.break-mode .mode-switch .focus-icon {
    display: none;
}

.break-mode .mode-switch .break-icon {
    display: block;
}

.break-mode .mode-switch {
    color: var(--break-primary);
}

.break-mode .circle-button.primary {
    background: var(--break-primary);
    color: white;
}

.break-mode .circle-button.primary:hover {
    background: var(--break-hover);
}

/* Mode switch button hover states */
.mode-switch:hover {
    background: var(--primary-color);
    color: white;
}

.break-mode .mode-switch:hover {
    background: var(--primary-color);
    color: white;
}

/* Add these new break mode styles */
:root:has(.break-mode) body,
body.break-mode {
    background-color: var(--break-background);
}

:root:has(.break-mode) .container,
body.break-mode .container {
    background-color: var(--break-background);
}

:root:has(.break-mode) .time,
body.break-mode .time {
    color: rgba(255, 255, 255, 0.8);  /* 70% opacity white */
}

:root:has(.break-mode) .progress-ring-bg,
body.break-mode .progress-ring-bg {
    stroke: rgba(255, 255, 255, 0.1);  /* Keep background ring subtle */
}

:root:has(.break-mode) .progress-ring-circle,
body.break-mode .progress-ring-circle {
    stroke: rgba(255, 255, 255, 0.8);  /* 70% opacity white */
}

/* Update any button text/icons that are white in break mode */
.break-mode .circle-button.primary {
    color: rgba(255, 255, 255, 0.4);  /* 70% opacity white */
}

/* Update controls for break mode */
:root:has(.break-mode) .controls svg,
body.break-mode .controls svg {
    color: rgba(255, 255, 255, 0.4);  /* 70% opacity white */
}

:root:has(.break-mode) .circle-button,
body.break-mode .circle-button {
    color: rgba(255, 255, 255, 0.8);
    background-color: rgba(255, 255, 255, 0.4);  /* Updated to 0.8 opacity */
}

:root:has(.break-mode) .circle-button:hover,
body.break-mode .circle-button:hover {
    color: rgba(255, 255, 255, 0.9);
    background-color: rgba(255, 255, 255, 1);  /* Slightly more opaque on hover */
}

:root:has(.break-mode) .circle-button.primary,
body.break-mode .circle-button.primary {
    background-color: rgba(255, 255, 255, 0.4);  /* Updated to 0.8 opacity */
}

:root:has(.break-mode) .circle-button svg,
body.break-mode .circle-button svg {
    color: var(--break-background);  /* Make icons contrast with the button background */
}

:root:has(.break-mode) .circle-button.primary:hover,
body.break-mode .circle-button.primary:hover {
    background-color: rgba(255, 255, 255, 1);  /* 100% white on hover */
    color: var(--break-background);  /* Ensure icon has good contrast */
}

/* Keep the regular hover state for non-primary buttons */
:root:has(.break-mode) .circle-button:not(.primary):hover,
body.break-mode .circle-button:not(.primary):hover {
    background-color: rgba(255, 255, 255, 1);
    color: var(--break-background);
}

/* Reset button specific styles in break mode
:root:has(.break-mode) #reset,
body.break-mode #reset {
    background-color: transparent;  /* Remove background */
/* } */

/* :root:has(.break-mode) #reset:hover,
body.break-mode #reset:hover {
    background-color: rgba(255, 255, 255, 1);  /* Solid white on hover */
    color: var(--break-background);
/* } */ */ */

/* Keep primary button styles */
:root:has(.break-mode) .circle-button.primary:hover,
body.break-mode .circle-button.primary:hover {
    background-color: rgba(255, 255, 255, 1);
    color: var(--break-background);
}

/* Keep add-time button styles */
:root:has(.break-mode) #add-time:hover,
body.break-mode #add-time:hover {
    background-color: rgba(255, 255, 255, 1);
    color: var(--break-background);
}

/* Break Mode Styles */
.break-mode {
    background-color: var(--break-background);
}

.break-mode .container {
    background-color: var(--break-background);
}

.break-mode .time,
.break-mode .progress-ring-circle,
.break-mode .circle-button.primary,
.break-mode .controls svg {
    color: var(--break-text);
}

.break-mode .progress-ring-bg {
    stroke: var(--break-ring-bg);
}

.break-mode .progress-ring-circle {
    stroke: var(--break-text);
}

/* Consolidated button styles for break mode */
.break-mode .circle-button {
    background-color: var(--break-surface);
    color: var(--break-background);
}

.break-mode .circle-button:hover {
    background-color: var(--break-surface-hover);
    color: var(--break-background);
}

.break-mode .circle-button svg {
    color: var(--break-background);
}

/* Reset button specific styles */
/* .break-mode #reset {
    background-color: transparent;
    color: var(--break-text);
} */

/* .break-mode #reset:hover {
    background-color: var(--break-surface-hover);
    color: var(--break-background);
} */

/* Mode switch icon visibility */
.mode-switch .break-icon {
    display: none;
}

.break-mode .mode-switch .focus-icon {
    display: none;
}

.break-mode .mode-switch .break-icon {
    display: block;
}

/* Break mode control buttons */
.break-mode .circle-button {
    background-color: var(--break-surface);
    color: var(--break-background);
}

.break-mode .circle-button:hover {
    background-color: var(--break-surface-hover);
    color: var(--break-background);
}

/* Reset button specific styles in break mode */
/* .break-mode #reset:hover { */
    /* background-color: var(--danger-hover); */
    /* color: var(--white); */
/* } */

/* Primary and secondary button hover states in break mode */
.break-mode .circle-button.primary:hover,
.break-mode .circle-button.secondary:hover {
    background-color: var(--break-surface-hover);
    color: var(--break-background);
}

/* Ensure icons maintain proper contrast */
.break-mode .circle-button svg {
    color: var(--break-background);
}

.break-mode #reset:hover svg {
    color: var(--white);
}

/* Control buttons */
/* .circle-button {
    background-color: rgba(255, 255, 255, 0.8); /* 70% white */
    color: var(--break-background);
/* } */ */

/* .circle-button:hover {
    background-color: rgba(255, 255, 255, 1); /* 100% white on hover */
    color: var(--break-background);
/* } */ */

/* Reset button specific styles */
#reset {
    background-color: rgba(255, 255, 255, 0.8); /* 70% white */
}

#reset:hover {
    background-color: var(--danger-hover); /* Red on hover */
    color: var(--white);
}

/* Mobile styles */
@media screen and (max-width: 768px) {
    .container {
        min-height: 100vh;
        position: relative;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        padding: 0 2rem;
    }

    .timer-container {
        margin: 0 auto;
        position: relative;
        transform: translateY(-10vh);
    }

    .controls {
        position: fixed;
        bottom: 10vh;
        left: 0;
        right: 0;
        width: 100%;
        padding: 0 2rem;
        margin: 0;
        background: transparent;
    }
}

/* Move all hover effects inside this media query */
@media (hover: hover) {
    .circle-button:hover {
        transform: translateY(-1px);
        box-shadow: 0px 5px 15px rgba(0, 0, 0, 0.15), 
                    0px 3px 6px rgba(0, 0, 0, 0.2);
    }

    .circle-button.primary:hover {
        background: var(--primary-hover);
    }

    #reset:hover {
        background-color: var(--danger-hover);
        color: var(--white);
    }

    .break-mode .circle-button:hover {
        background-color: var(--break-surface-hover);
        color: var(--break-background);
    }
}